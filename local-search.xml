<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>C预处理器</title>
    <link href="undefined2021/07/18/science/computer/c_cpp/c_preprocesser/"/>
    <url>2021/07/18/science/computer/c_cpp/c_preprocesser/</url>
    
    <content type="html"><![CDATA[<h1 id="翻译程序的第一步"><a href="#翻译程序的第一步" class="headerlink" title="翻译程序的第一步"></a>翻译程序的第一步</h1><p>这篇文章完全参考《C Primer Plus》，同时也非常推荐将这本书作为学习 C 语言的入门书籍。</p><p>在预处理之前，编译器会对程序进行一些翻译处理：</p><ol><li>编译器可以把源代码中出现的字符映射到源字符集，这个过程处理多字节字符和三字节字符序列</li><li>编译器定位每个反斜杠后面跟着换行符的实例，并删除它们（例如将下面两个物理行转换为一个逻辑行）<pre><code class="lang-c">printf(&quot;That&#39;s wond\    erful!\n&quot;);// convert toprintf(&quot;That&#39;s wonderful!\n&quot;);</code></pre></li><li>编译器把文本划分为预处理记号序列、空白序列和注释序列（记号是由空格、制表符或换行符分隔的项），<strong>这里需要需要注意的是：编译器将用一个空格字符替换每一条注释</strong>。</li></ol><h1 id="define"><a href="#define" class="headerlink" title="#define"></a>#define</h1><h2 id="明示常量"><a href="#明示常量" class="headerlink" title="明示常量"></a>明示常量</h2><p>可以出现在源文件的任何地方，它的定义从指令出现的地方到文件末尾都是有效的。（其中宏名称中不能出现空格）</p><pre><code class="lang-c">// 预处理指令 宏名称 替换体#define FMT &quot;X is %d.\n&quot;</code></pre><p>我们可以用上面的宏作为 printf 的格式字符串：</p><pre><code class="lang-c">#define FMT &quot;X is %d.\n&quot;x = 2;printf(FMT, x);</code></pre><blockquote><p>我们也可以使用这种方式达到和宏定义类似的效果：</p><pre><code class="lang-c">const char * fmt = &quot;X is %d.\n&quot;;x = 2;printf(fmt, x);</code></pre></blockquote><p>宏定义是可以嵌套的（一些编译器不支持）。</p><p>宏常量可以用于指定标准数组的大小和 const 变量的初始值：</p><pre><code class="lang-c">#define LIMIT 20const int LIM = 50;static int data1[LIMIT];    // 有效static int data2[LIM];        // 无效const int LIM2 = 2 * LIMIT;    // 有效const int LIM3 = 2 * LIM;    // 无效</code></pre><p>数组大小必须是整型常量的组合、枚举常量和 sizeof 表达式，不包括 const 声明的值（这也是 C++ 和 C 的区别之一）。如果需要重定义常量，使用 const 关键字和作用域规则会更容易一些。</p><h2 id="带参数宏"><a href="#带参数宏" class="headerlink" title="带参数宏"></a>带参数宏</h2><pre><code class="lang-c">// 预处理指令 宏(参数) 替换体#define MEAN(x, y)    (((x) + (y)) / 2)</code></pre><p>在写带参数宏时，一定要注意使用多个宏来解决优先级和预想的不一致导致的问题。例如，如果将求一个数的平方定义如下：</p><pre><code class="lang-c">#define SQUARE(x)    x * x</code></pre><p>那么下面使用这个宏定义的代码的输出就会和预想的不同：</p><pre><code class="lang-c">x = 3;printf(&quot;square(%d) = %d&quot;, x, SQUARE(x + 1));// 输出: square(3) = 7</code></pre><p>带参数的宏虽然和普通函数形式上相似，但是预处理器不做计算、不求值，只替换字符串序列，因此上面的 SQUARE(x + 1) 实际是 x + 1 <em> x + 1 = 3 + 1 </em> 3  + 1 = 7。</p><p>为了避免这个问题，可以在带参数宏中添加合适的圆括号：</p><pre><code class="lang-c">#define SQUARE(x)    (x) * (x)</code></pre><p>但是这样也不能解决全部的问题，如果上面的宏定义像下面这样使用：</p><pre><code class="lang-c">x = 4;printf(&quot;100 / square(%d) = %d&quot;, x, 100 / SQUARE(x));// 输出: 100 / square(4) = 100</code></pre><p>也会让结果违反我们的预期，这个是因为 100 / SQUARE(x) 就是 100 / (x) * (x) = 100，我们同样可以通过添加圆括号来解决这个问题：</p><pre><code class="lang-c">#define SQUARE(x)    ((x) * (x))</code></pre><p>尽管这样，还是不能解决所有的问题，SQUARE(++x) 变成了 ((++x) <em> (++x))，这会导致递增了两次 x。解决这个问题最简单的方法是避免使用 ++x 作为宏参数。<em>*一般而言，不要在宏中使用递增或递减运算符</em></em>。但是 ++x 可以作为普通函数的参数，因为编译器会对 ++x 求值后，再把该值传递给函数。</p><h2 id="宏的的运算符"><a href="#宏的的运算符" class="headerlink" title="宏的的运算符"></a>宏的的运算符</h2><h3 id="运算符（宏参数转换为字符串）"><a href="#运算符（宏参数转换为字符串）" class="headerlink" title="#运算符（宏参数转换为字符串）"></a>#运算符（宏参数转换为字符串）</h3><p>C 允许在字符串中包含参数，在带参数宏的替换体中，#号作为一个预处理运算符，可以把记号转换为字符串，这个过程被称为字符串化（<em>stringizing</em>）。</p><pre><code class="lang-c">#include &lt;stdio.h&gt;#define SQUARE(x)    ((x) * (x))#define PSQR(x)        printf(&quot;The square of &quot; #x &quot; is %d.\n&quot;, SQUARE(x))// 例如：// y = 2;// PSQR(y); 实际上被替换为: printf(&quot;The square of &quot; &quot;y&quot; &quot; is %d.\n&quot;, SQUARE(y));//          也就是: printf(&quot;The square of y is %d.\n&quot;, SQUARE(y));</code></pre><h3 id="运算符（预处理器黏合剂）"><a href="#运算符（预处理器黏合剂）" class="headerlink" title="##运算符（预处理器黏合剂）"></a>##运算符（预处理器黏合剂）</h3><pre><code class="lang-c">#include &lt;stdio.h&gt;#define XNAME(x)    x ## n#define PRINT_XN(n)    printf(&quot;x&quot; #n &quot; = %d\n&quot;, x ## n)int main(void){    int XNAME(1) = 12;    // 变为 int x1 = 12;    int XNAME(2) = 30;    // 变为 int x2 = 30;    PRINT_XN(1);        // 变为 printf(&quot;x1 = %d\n&quot;, x1);    PRINT_XN(2);        // 变为 printf(&quot;x2 = %d\n&quot;, x2);}</code></pre>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C/Cpp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>绪论</title>
    <link href="undefined2021/07/18/mathematics/modern_algebra/chapter_0/"/>
    <url>2021/07/18/mathematics/modern_algebra/chapter_0/</url>
    
    <content type="html"><![CDATA[<h1 id="1-近世代数简史"><a href="#1-近世代数简史" class="headerlink" title="1. 近世代数简史"></a>1. 近世代数简史</h1><p>大约在公元前1700年左右，古巴比伦人就已经知道一元二次方程的一种解法了。然后，人们从得到一元二次方程的正根开始，接受了方程的负根，承认了无理数，并最终发现了虚数根。可以说，人们对一元二次方程方程认识的不断加深，直接推动了数学的发展。不过，我们先暂停一下，有一个问题我们还没有说清楚：为什么人们要解决一元二次方程呢？或者说人们是如何发现“一元二次方程”这个问题的呢？我觉得有下面几个原因：</p><ol><li>人们已经实际生活的分配问题中，对分数有了一定的认识，并且已经可以总结出“一元一次方程”的问题</li><li>由于土地、建筑测量的需求的增加，当乘积和面积的概念被定义时，就能够总结出“一元二次方程”的问题</li></ol><p>或者这个问题真的来源于某个人的奇思妙想，但是我觉得更有可能来源于解决实际问题的需求。从这个时候开始，数学在人类智慧的土壤中才开始萌芽。</p><p>人们对一元二次方程的认识过程长达三千多年，直到16世纪的韦达（Vieta，1540~1603）才基本弄清楚一般情况下一元二次方程方程的解，并给出了根与系数的关系。其中根与系数的关系，对我们认识一元二次方程方程以及更高次方程很有帮助，所以在这里我想描述一下这个关系。</p><p>如果一般的一元二次方程可以表示为：</p><script type="math/tex; mode=display">ax^2 + bx + c = 0, (a \neq 0, x \in \mathbb{C}) \tag{1}</script><p>那么一元二次方程的根（$x_1$, $x_2$）与系数（$a$, $b$, $c$）的关系如下：</p><ul><li>$x_1 + x_2 = -b/a$</li><li>$x_1 \cdot x_2 = c/a$</li></ul><p>这个关系可以不通过求根公式得到，也就是说上面的关系是一个关于一元二次方程非常基本的结论。</p><blockquote><p><strong>根与系数关系的推导：</strong></p><p>首先我们根据<strong>代数基本定理</strong>（不知道代数基本定理，可以先把它看作：方程最高次是多少，就有多少个根）知道一元二次方程有两个根。根据这个前提条件，我们可以将原先的一元二次方程表示为：$a(x - x_1)(x - x_2) = 0, (a \neq 0, x \in \mathbb{C})$</p><p>然后，我们把上面的式子展开，就可以得到：</p><script type="math/tex; mode=display">ax^2 - a(x_1 + x_2)x + ax_1x_2 = 0, (a \neq 0, x \in \mathbb{C}) \tag{2}</script><p>对比公式 (1) 和公式 (2)，可以得到根与系数的关系。</p><p>最近还有人根据上面的关系得到了一种一元二次方程的解法，挺有意思的，这里也说一下。</p><p>首先可以根据根与系数的关系式得到：</p><script type="math/tex; mode=display">r=-b/2a \tag{3}</script><p>令 $x_1 = r + s$，$x_2 = r - s$，所以可以从根与系数关系中进一步得到：</p><script type="math/tex; mode=display">x_1x_2 = r^2 - s^2 = c/a \tag{4}</script><p>从而可以比较容易地计算出：</p><script type="math/tex; mode=display">s = \pm \sqrt{r^2 - c/a} \tag{5}</script><p>得到两个根 $x_1, x_2$</p></blockquote><p>二次方程的问题研究清楚后，三次、四次方程直到公元1500年左右才得到了解的公式。</p>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>近世代数</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="undefined2021/07/04/science/computer/refactor/charpter_1/"/>
    <url>2021/07/04/science/computer/refactor/charpter_1/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="undefined2021/07/04/mathematics/probability_models/chapter_1/"/>
    <url>2021/07/04/mathematics/probability_models/chapter_1/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="undefined2021/03/14/science/computer/design_pattern/FSM_in_C/"/>
    <url>2021/03/14/science/computer/design_pattern/FSM_in_C/</url>
    
    <content type="html"><![CDATA[<p>FSM</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="undefined2021/02/13/science/physics/quantum/Untitled/"/>
    <url>2021/02/13/science/physics/quantum/Untitled/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>1. 集合论公理</title>
    <link href="undefined2021/01/02/mathematics/set_thoery/chapter_1/"/>
    <url>2021/01/02/mathematics/set_thoery/chapter_1/</url>
    
    <content type="html"><![CDATA[<h2 id="Zermelo-Fraenkel公理"><a href="#Zermelo-Fraenkel公理" class="headerlink" title="Zermelo-Fraenkel公理"></a>Zermelo-Fraenkel公理</h2><ol><li></li></ol>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>集合论</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第一讲 连续统</title>
    <link href="undefined2021/01/02/mathematics/analysis/chapter_1/"/>
    <url>2021/01/02/mathematics/analysis/chapter_1/</url>
    
    <content type="html"><![CDATA[<p><strong>该系列来自《数学分析八讲》</strong></p><h2 id="从连续统开始"><a href="#从连续统开始" class="headerlink" title="从连续统开始"></a>从连续统开始</h2><p>为了定义最为重要和首要的数学分析概念——<strong>函数关系</strong>，要清晰地定义函数关系，需要充分认识函数的<strong>定义域</strong>。而最常见的函数定义域是所有实数的集合，这个集合在数学中称为<strong>连续统</strong>。</p><p>对于连续统这个概念，我们首先会想到的问题是：</p><ol><li>什么是实数？</li><li>什么时候以及为什么我们相信实际上已经掌握<strong>所有</strong>实数？</li></ol><h2 id="连续统理论"><a href="#连续统理论" class="headerlink" title="连续统理论"></a>连续统理论</h2>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数学分析</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="undefined2021/01/02/science/computer/algorithms/chapter_1/"/>
    <url>2021/01/02/science/computer/algorithms/chapter_1/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>从现在开始</title>
    <link href="undefined2021/01/02/from-now-on/"/>
    <url>2021/01/02/from-now-on/</url>
    
    <content type="html"><![CDATA[<p>有时候感觉人需要给自己立一个Flag，不然就会懒到一点都不想动。Flag还需要写下来，或者公诸于他人，不然又会因为“同情自己的努力”而半途而废。周末想起来要理发，总是会拖延到下个周末；说好要在2020年每天慢跑锻炼身体，却一直到2021年的第一天都没有跑过一次；买了很多书，但每次翻开都是第一页…</p><p>我需要一个新的Flag来拯救“自己的理想”了，一次无奈的尝试，不想每天都充满遗憾地走过。从现在开始…</p>]]></content>
    
    
    <categories>
      
      <category>感想</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Flag</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="undefined2019/09/29/hello-world/"/>
    <url>2019/09/29/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="lang-bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="lang-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="lang-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="lang-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>